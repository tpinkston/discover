package discover.vdis.enums;

import java.util.List;

/**
 * RAD_CAT: This class is auto-generated by vdis.EnumGenerator
 */
public final class RAD_CAT extends Value {

    public static final RAD_CAT
       OTH = new RAD_CAT(0, "OTH", "Other", true),
       VTR = new RAD_CAT(1, "VTR", "Voice Transmission/Reception", true),
       DLTR = new RAD_CAT(2, "DLTR", "Data Link Transmission/Reception", true),
       VDLTR = new RAD_CAT(3, "VDLTR", "Voice and Data Link Transmission/Reception", true),
       ILSGT = new RAD_CAT(4, "ILSGT", "Instrumented Landing System (ILS) Glideslope Transmitter", true),
       ILSLT = new RAD_CAT(5, "ILSLT", "Instrumented Landing System (ILS) Localizer Transmitter", true),
       ILSOMB = new RAD_CAT(6, "ILSOMB", "Instrumented Landing System (ILS) Outer Marker Beacon", true),
       ILSMMB = new RAD_CAT(7, "ILSMMB", "Instrumented Landing System (ILS) Middle Marker Beacon", true),
       ILSIMB = new RAD_CAT(8, "ILSIMB", "Instrumented Landing System (ILS) Inner Marker Beacon", true),
       ILSR = new RAD_CAT(9, "ILSR", "Instrumented Landing System (ILS) Receiver (Platform Radio)", true),
       TACANT = new RAD_CAT(10, "TACANT", "Tactical Air Navigation (TACAN) Transmitter (Ground Fixed Equipment)", true),
       TACANR = new RAD_CAT(11, "TACANR", "Tactical Air Navigation (TACAN) Receiver (Moving Platform Equipment)", true),
       TACANTR = new RAD_CAT(12, "TACANTR", "Tactical Air Navigation (TACAN) Transmitter/Receiver (Moving Platform Equipment)", true),
       VORT = new RAD_CAT(13, "VORT", "Variable Omni-Ranging (VOR) Transmitter (Ground Fixed Equipment)", true),
       VORDME = new RAD_CAT(14, "VORDME", "Variable Omni-Ranging (VOR) with Distance Measuring Equipment (DME) Transmitter (Ground Fixed Equipment)", true),
       VORR = new RAD_CAT(15, "VORR", "Combined VOR/ILS Receiver (Moving Platform Equipment)", true),
       VORTAC = new RAD_CAT(16, "VORTAC", "Combined VOR & TACAN (VORTAC) Transmitter", true),
       NDBT = new RAD_CAT(17, "NDBT", "Non-Directional Beacon (NDB) Transmitter", true),
       NDBR = new RAD_CAT(18, "NDBR", "Non-Directional Beacon (NDB) Receiver", true),
       NDBDME = new RAD_CAT(19, "NDBDME", "Non-Directional Beacon (NDB) with Distance Measuring Equipment (DME) Transmitter", true),
       DME = new RAD_CAT(20, "DME", "Distance Measuring Equipment (DME)", true),
       L16 = new RAD_CAT(21, "L16", "Link 16 Terminal", true),
       L11 = new RAD_CAT(22, "L11", "Link 11 Terminal", true),
       L11B = new RAD_CAT(23, "L11B", "Link 11B Terminal", true),
       EPLRSSADL = new RAD_CAT(24, "EPLRSSADL", "EPLRS/SADL Terminal", true),
       IFDL = new RAD_CAT(25, "IFDL", "F-22 Intra-Flight Data Link (IFDL)", true),
       MADL = new RAD_CAT(26, "MADL", "F-35 Multifunction Advanced Data Link (MADL)", true),
       SINCGARS = new RAD_CAT(27, "SINCGARS", "SINCGARS Terminal", true),
       LBANDSAT = new RAD_CAT(28, "LBANDSAT", "L-Band SATCOM Terminal", true),
       IBSIS = new RAD_CAT(29, "IBSIS", "IBS-I/S Terminal", true),
       GPS = new RAD_CAT(30, "GPS", "GPS", true);

    private RAD_CAT(int value, String name, String description, boolean known) {

        super(value, name, description, known);

        cache(this, RAD_CAT.class);
    }

    /** @see Value#values(Class) */
    public static List<RAD_CAT> values() {

        return values(RAD_CAT.class);
    }

    /** @see Value#values(Class, boolean) */
    public static List<RAD_CAT> values(boolean known) {

        return values(RAD_CAT.class, known);
    }

    /** @see Value#get(int, Class) */
    public static RAD_CAT get(int value) {

        return get(value, RAD_CAT.class);
    }
}

